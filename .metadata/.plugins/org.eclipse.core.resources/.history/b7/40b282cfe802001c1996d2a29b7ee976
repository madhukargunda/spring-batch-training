<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/batch https://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd">


	<!-- stored job-meta in database -->

	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseType" value="mysql" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />


	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost/batchdb" />
		<property name="username" value="root" />
		<property name="password" value="password" />
	</bean>

	<!-- Create meta-tables -->
	<!-- create job-meta tables automatically Each time when running the program creates the tables and after completion deletes the table -->

	<jdbc:initialize-database
		data-source="dataSource">
		<jdbc:script
			location="org/springframework/batch/core/schema-drop-mysql.sql" />
		<jdbc:script
			location="org/springframework/batch/core/schema-mysql.sql" />
	</jdbc:initialize-database>
	
	
		<!-- Step3 : Define batch flow/configuration/dependent beans -->
	<bean id="studentCSVItemReader"
		class="org.springframework.batch.item.file.FlatFileItemReader">
		<property name="resource"
			value="classpath:student-data.csv" />
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean
				class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="delimiter" value="," />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="study.pattern.training.dataprocessing.mapper.StudentFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>


	<bean id="studentDataProcessor"
		class="study.pattern.training.dataprocessing.processor.StudentDataResultsItemProcessor" />

	<bean id="studentDataWriter"
		class="org.springframework.batch.item.file.FlatFileItemWriter">
		
		<!--  Specify the Filesystem to write file 
		 -->
		<property name="resource"
			value="file:/Users/madhukargunda/Work/output/student-data-results.csv" />

		<!-- if we specify true If you are running the job multiple times store 
			the data on the same file/////////if we specify false creates the new file 
			each time -->
		<property name="appendAllowed" value="true" />

		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names"
							value="rollnumber,name,marks,grade,result" />
					</bean>
				</property>
			</bean>
		</property>
		
		<property name="headerCallback">
		  <bean class="study.pattern.training.dataprocessing.callbacks.AddHeadertoOutpputFile"/>
		</property>
		
		<property name="footerCallback">
		   <bean class="study.pattern.training.dataprocessing.callbacks.AddFootertoOutputFile"/>
		</property>
	
	

</beans>
